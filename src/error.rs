use std::fmt::{Display, Formatter};

/// An enum providing all possible errors generated by this crate.
#[derive(Debug)]
pub enum Error {
    /// Thrown when a string with invalid data is attempted to be parsed into
    /// an identifier.
    InvalidData,

    /// The provided prefix contains invalid characters or is the wrong length.
    InvalidPrefix,

    /// The provided input is in an invalid format.
    InvalidFormat,

    /// Thrown when a string containing an invalid character is attempted to
    /// be pasrsed into an identifier.
    InvalidChar,

    /// Thrown when a string of invalid length is attempted to be parsed into
    /// an identifier.
    InvalidLength,
}

impl Error {
    /// Get the error message
    pub fn message(&self) -> &'static str {
        match self {
            Self::InvalidData => "InvalidData",
            Self::InvalidPrefix => "InvalidPrefix",
            Self::InvalidFormat => "InvalidFormat",
            Self::InvalidChar => "InvalidChar",
            Self::InvalidLength => "InvalidLength",
        }
    }
}

impl Display for Error {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.message())
    }
}

impl std::error::Error for Error {}
