use std::fmt::{Display, Formatter};

/// An enum providing all possible errors generated by this crate.
#[derive(Debug, Hash, PartialEq, Eq)]
pub enum Error {
    /// Thrown when a string with invalid data is attempted to be parsed into
    /// an identifier.
    InvalidData,

    /// The provided prefix contains invalid characters or is the wrong length.
    InvalidPrefix,

    /// The provided input is in an invalid format.
    InvalidFormat,

    /// Thrown when a string containing an invalid character is attempted to
    /// be pasrsed into an identifier.
    InvalidChar { found: char },

    /// Thrown when a string of invalid length is attempted to be parsed into
    /// an identifier.
    InvalidLength { expected: usize, found: usize },
}

impl Error {
    /// Get the error message
    pub fn message(&self) -> String {
        match self {
            Self::InvalidData => "input contains invalid data".to_owned(),
            Self::InvalidPrefix => "prefix is not valid".to_owned(),
            Self::InvalidFormat => "format is not correct".to_owned(),
            Self::InvalidChar { found } => format!("invalid character: {}", found),
            Self::InvalidLength { expected, found } => format!(
                "input is the wrong length: expected {} but found {}",
                expected, found
            ),
        }
    }
}

impl Display for Error {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.message())
    }
}

impl std::error::Error for Error {}
